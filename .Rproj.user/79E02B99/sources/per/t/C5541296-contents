---
title: <center><font size="7"><b>Song analysis</b></font></center>
subtitle: <center><font size="4"><b>Vervain Hummingbird vocal behavior 2.0</b></font></center>
author: <center><font size="4"><a href="http://marceloarayasalas.weebly.com/">Marcelo Araya-Salas, PhD</a></font></center>
output:
  html_document:
    
    toc: yes
    toc_depth: 3
    toc_float:
      collapsed: no
      smooth_scroll: no
fontsize: 12pt 
editor_options: 
  chunk_output_type: console
---


<style>
.column-left{
  float: left;
  width: 30%;
  text-align: left;
}
.column-center{
  display: inline-block;
  width: 30%;
  text-align: center;
}
.column-right{
  float: right;
  width: 40%;
  text-align: right;
}
</style>

```{r packages, message=FALSE,warning=FALSE, echo=FALSE, eval = T, include=F}

# remove all objects
rm(list = ls())

# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))

# list packages (use user/package.name for github packages)
x <- c("maRce10/warbleR", "ggplot2", "RColorBrewer", #"googlesheets",
       "kableExtra", "knitr", "stringdist",  "maRce10/Rraven", "parallel", "vegan", #"irr", "stringr", "moments", 
       "pbapply", "viridis",
       #"Rtsne", "mclust", "caret", "randomForest", "dkahle/ggmap", "cowplot"
       )

aa <- lapply(x, function(y) {
  
  # get pakage name
  pkg <- strsplit(y, "/")[[1]]
  pkg <- pkg[length(pkg)]
  
  # check if installed, if not then install 
  if (!pkg %in% installed.packages()[,"Package"])  {

      if (grepl("/", y))  devtools::install_github(y) else
    install.packages(y) 
    }

  # load package
  try(require(pkg, character.only = T), silent = T)
  })


```

```{r functions and parameters, eval = T, echo = F}

cmc <- function(n) rep(adjustcolor(brewer.pal(5, "Spectral"), 
                                   alpha.f = 0.6), 
                       ceiling(n/4))[1:n]

cols <- brewer.pal(8, "Spectral")

order_values <- function(x) {

  # convert to factor
  x <- factor(x, levels = as.character(stats::na.exclude(x[!duplicated(x)])))  

  # convert to numeric
  x <- as.numeric(x)

  return(x)
  }

match_elem <- function(X, vctr, index)
{
 ndx <- X[, names(X)  == index] 
 index2 <- unique(ndx)  
  
  y <- X[ndx == index2[1], names(X) == vctr]

  z <- X[ndx == index2[2], names(X) == vctr]
  
  for(i in 2:(length(y) - 1)) {
  if (y[i] != z[i]) {
  if (!y[i] %in% y[1:(i - 1)])     {y[y > y[i]] <- y[y > y[i]] + 1 
  y[i] <- max(y) + 1
  } else    {
    if (!z[i] %in% z[1:(i - 1)]) {
      z[z > z[i]] <- z[z > z[i]] - 1
    z[i] <- max(z) + 1
    }
    }
}
}
  X[ndx == index2[1], names(X) == vctr] <- y

  X[ndx == index2[2], names(X) == vctr] <- z
  return(X)
  }

# matrix of origin for mantel tests
mat_origin <- function(x, as.dist = TRUE) {
  
m <- matrix(nrow = length(x), ncol = length(x), dimnames = list(x, x))
  
m[] <- 0

out <- lapply(2:length(x),  function(z)
  {
  
    return(ifelse(x[z - 1] == x[z:length(x)], 0, 1)) 
  
  })

orig <- do.call(c, out)

m[lower.tri(m, diag=FALSE)] <- orig
m <- t(m)
m[lower.tri(m, diag=FALSE)] <- orig

if(as.dist) m <- as.dist(m)

return(m)
}


options("digits" = 3, "digits.secs" = 3, knitr.table.format = "html")

try(warbleR_options(flim = c(2, 14), bp = c(2, 14), ovlp = 90, wl = 300, parallel = 1, pb = TRUE,  wav.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files"), silent = TRUE)

try(warbleR_options(flim = c(2, 14), bp = c(2, 14), ovlp = 90, wl = 300, parallel = 1, pb = TRUE,  wav.path = "/home/dell/Dropbox/Recordings/vervain_recs/converted_sound_files"), silent = TRUE)

```


```{r check old selections}

sls <- imp_raven(path = "./data/raw/", warbler.format = TRUE, all.data = TRUE)
class(sls)

cs <-  check_sels(sls)


#table(cs$check.res)

#unique(cs$sound.files[cs$check.res != "OK"])

wi <- wav_info()

#table(wi$sample.rate)

#fix_wavs(samp.rate = 44.1, bit.depth = 16, sox = TRUE)

sls <- match_wav_case(sls, path = .Options$warbleR$wav.path)

exp_raven(X = sls, path = cd, sound.file.path = .Options$warbleR$wav.path, file.name = "vervain_selections_all_files.txt")

```

```{r check 2020 selections}

sls <- imp_raven(warbler.format = TRUE, all.data = TRUE)

cs <- check_sels(sls)

sls <- sls[cs$check.res == "OK", ]

# table(cs$check.res)

#unique(cs$sound.files[cs$check.res != "OK"])

wi <- wav_info()

sls <- sls[order(sls$sound.files, sls$start), ]

full_spec(X = sls, width = 24 / 1.5, height = 20 / 1.5, fast.spec = TRUE, pal = reverse.gray.colors.1, res = 70, sxrow = 5, rows = 17, parallel = 3, ovlp = 20)

move_imgs(from = .Options$warbleR$wav.path, to = "./output/full_spectrograms")

```

```{r}

sls <- imp_raven(warbler.format = TRUE, all.data = TRUE)

cs <- check_sels(sls)

sls <- sls[cs$check.res == "OK", ]

sls$sound.files.num <- gsub("ARAYA-SAL-|\\.WAV", "", sls$sound.files)

sls$element[sls$element == ""] <- "99"

sls$sf.element <- paste(sls$sound.files.num, sls$element, sep = "-")


out <- lapply(unique(sls$sound.files), function(x){
  
  X <- sls[sls$sound.files == x, ]
  X$Indiv <- unique(na.omit(X$Indiv))[1]
  X$Source <- unique(na.omit(X$Source))[1]
  X$Location <- unique(na.omit(X$Location))[1]
  X$Country <- unique(na.omit(X$Country))[1]
  
  return(X)
  })

sls <- do.call(rbind, out)


exp_raven(sls, file.name = "vervain_selections_Melanie_v02.txt", sound.file.path = .Options$warbleR$wav.path)

fix_path(new.begin.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files", sound.file.col = "Begin File")

table(sls$sound.files[is.na(sls$Indiv)])

unique(sls$Indiv[sls$sound.files.num == "075"])

names(sls)

tb <- table(sls$Indiv)

tb <- table(sls$Indiv)

hist(tb)
range(tb)

tb[tb > 65]

sel.indivs <- names(tb[tb > 65])

sel.sound.files <- unique(sls$sound.files[sls$Indiv %in%  sel.indivs])




table(sls$element[sls$Indiv == 17])

table(sls$element[sls$Indiv == ])

sls <- sls[order(sls$sound.files, sls$Indiv, sls$element), ]




sls$position <- round(sls$start + (sls$end - sls$start) / 2, 2)

catalog(X = sls, nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "_by-sound-file",  labels = c("element", "sound.files.num", "position"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 10, hatching = 1, cex = 1.4)

move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)

```

