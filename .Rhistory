# remove all objects
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
# list packages (use user/package.name for github packages)
x <- c("maRce10/warbleR", "ggplot2", "RColorBrewer", #"googlesheets",
"kableExtra", "knitr", "stringdist",  "maRce10/Rraven", "parallel", "vegan", #"irr", "stringr", "moments",
"pbapply"
#"Rtsne", "mclust", "caret", "randomForest", "dkahle/ggmap", "cowplot"
)
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
cmc <- function(n) rep(adjustcolor(brewer.pal(5, "Spectral"),
alpha.f = 0.6),
ceiling(n/4))[1:n]
cols <- brewer.pal(8, "Spectral")
order_values <- function(x) {
# convert to factor
x <- factor(x, levels = as.character(stats::na.exclude(x[!duplicated(x)])))
# convert to numeric
x <- as.numeric(x)
return(x)
}
match_elem <- function(X, vctr, index)
{
ndx <- X[, names(X)  == index]
index2 <- unique(ndx)
y <- X[ndx == index2[1], names(X) == vctr]
z <- X[ndx == index2[2], names(X) == vctr]
for(i in 2:(length(y) - 1)) {
if (y[i] != z[i]) {
if (!y[i] %in% y[1:(i - 1)])     {y[y > y[i]] <- y[y > y[i]] + 1
y[i] <- max(y) + 1
} else    {
if (!z[i] %in% z[1:(i - 1)]) {
z[z > z[i]] <- z[z > z[i]] - 1
z[i] <- max(z) + 1
}
}
}
}
X[ndx == index2[1], names(X) == vctr] <- y
X[ndx == index2[2], names(X) == vctr] <- z
return(X)
}
# matrix of origin for mantel tests
mat_origin <- function(x, as.dist = TRUE) {
m <- matrix(nrow = length(x), ncol = length(x), dimnames = list(x, x))
m[] <- 0
out <- lapply(2:length(x),  function(z)
{
return(ifelse(x[z - 1] == x[z:length(x)], 0, 1))
})
orig <- do.call(c, out)
m[lower.tri(m, diag=FALSE)] <- orig
m <- t(m)
m[lower.tri(m, diag=FALSE)] <- orig
if(as.dist) m <- as.dist(m)
return(m)
}
options("digits" = 3, "digits.secs" = 3, knitr.table.format = "html")
warbleR_options(flim = c(2, 14), bp = c(2, 14), ovlp = 90, wl = 300, parallel = detectCores() - 1, pb = TRUE,  wav.path = "C:/Users/melan/Documents/vervain_recs")
sls <- imp_raven(path = "./data/raw/", warbler.format = TRUE, all.data = TRUE)
cs <-  check_sels(sls)
table(cs$check.res)
unique(cs$sound.files[cs$check.res != "OK"])
wav_info()
cs <-  check_sels(sls)
warbleR_options(flim = c(2, 14), bp = c(2, 14), ovlp = 90, wl = 300, parallel = 1, pb = TRUE,  wav.path = "C:/Users/melan/Documents/vervain_recs")
sls <- imp_raven(path = "./data/raw/", warbler.format = TRUE, all.data = TRUE)
cs <-  check_sels(sls)
wi <- wav_info()
table(wi$sample.rate)
library(bioacoustics)
fix_wavs(samp.rate = 44.1, bit.depth = 16)
fix_wavs(samp.rate = 44.1, bit.depth = 16)
fix_wavs(samp.rate = 44.1, bit.depth = 16, sox = TRUE)
warbleR_options(flim = c(2, 14), bp = c(2, 14), ovlp = 90, wl = 300, parallel = 1, pb = TRUE,  wav.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files")
```{r}
sls <- imp_raven(path = "./data/raw/", warbler.format = TRUE, all.data = TRUE)
cs <-  check_sels(sls)
wi <- wav_info()
exp_raven(sls)
exp_raven(sls, sound.file.path = "./data/raw/" )
exp_raven(sls, sound.file.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files")
?exp_raven
sls
object.class(sls)
class(sls)
?imp_raven
sls <- imp_raven(path = "./data/raw/", warbler.format = TRUE, all.data = TRUE, output = selec.table)
class(sls)
cs <-  check_sels(sls)
wi <- wav_info()
exp_raven(sls, sound.file.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files/")
exp_raven(sls, sound.file.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files")
?exp_raven
exp_raven(sls, path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files")
exp_raven(sls, sound.file.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files")
exp_raven(cs, sound.file.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files")
# remove all objects
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
# list packages (use user/package.name for github packages)
x <- c("maRce10/warbleR", "ggplot2", "RColorBrewer", #"googlesheets",
"kableExtra", "knitr", "stringdist",  "maRce10/Rraven", "parallel", "vegan", #"irr", "stringr", "moments",
"pbapply"
#"Rtsne", "mclust", "caret", "randomForest", "dkahle/ggmap", "cowplot"
)
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
cmc <- function(n) rep(adjustcolor(brewer.pal(5, "Spectral"),
alpha.f = 0.6),
ceiling(n/4))[1:n]
cols <- brewer.pal(8, "Spectral")
order_values <- function(x) {
# convert to factor
x <- factor(x, levels = as.character(stats::na.exclude(x[!duplicated(x)])))
# convert to numeric
x <- as.numeric(x)
return(x)
}
match_elem <- function(X, vctr, index)
{
ndx <- X[, names(X)  == index]
index2 <- unique(ndx)
y <- X[ndx == index2[1], names(X) == vctr]
z <- X[ndx == index2[2], names(X) == vctr]
for(i in 2:(length(y) - 1)) {
if (y[i] != z[i]) {
if (!y[i] %in% y[1:(i - 1)])     {y[y > y[i]] <- y[y > y[i]] + 1
y[i] <- max(y) + 1
} else    {
if (!z[i] %in% z[1:(i - 1)]) {
z[z > z[i]] <- z[z > z[i]] - 1
z[i] <- max(z) + 1
}
}
}
}
X[ndx == index2[1], names(X) == vctr] <- y
X[ndx == index2[2], names(X) == vctr] <- z
return(X)
}
# matrix of origin for mantel tests
mat_origin <- function(x, as.dist = TRUE) {
m <- matrix(nrow = length(x), ncol = length(x), dimnames = list(x, x))
m[] <- 0
out <- lapply(2:length(x),  function(z)
{
return(ifelse(x[z - 1] == x[z:length(x)], 0, 1))
})
orig <- do.call(c, out)
m[lower.tri(m, diag=FALSE)] <- orig
m <- t(m)
m[lower.tri(m, diag=FALSE)] <- orig
if(as.dist) m <- as.dist(m)
return(m)
}
options("digits" = 3, "digits.secs" = 3, knitr.table.format = "html")
warbleR_options(flim = c(2, 14), bp = c(2, 14), ovlp = 90, wl = 300, parallel = 1, pb = TRUE,  wav.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files")
sls <- imp_raven(path = "./data/raw/", warbler.format = TRUE, all.data = TRUE)
class(sls)
cs <-  check_sels(sls)
wi <- wav_info()
exp_raven(sls, sound.file.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files")
sls$sound.files
exp_raven(sls, sound.file.path = .Options$warbleR$wav.path)
cd <- getwd()
setwd( .Options$warbleR$wav.path)
exp_raven(X = sls, path = cd)
exp_raven(X = sls, path = cd, sound.file.path = .Options$warbleR$wav.path)
list.files(.Options$warbleR$wav.path)
sls$sound.files
setwd("C:/Users/melan/Dropbox/vervain_2020")
sls <- match_wav_case(sls, path = .Options$warbleR$wav.path)
exp_raven(X = sls, path = cd, sound.file.path = .Options$warbleR$wav.path)
exp_raven(X = sls, path = cd, sound.file.path = .Options$warbleR$wav.path, file.name = "vervain_selections_all_files.txt")
rnum
?sample
c(-100:100)
v <- sample(c, 10)
v <- sample(m, 10)
m <- c(-100:100)
v <- sample(m, 10)
v
v.car <- c("a", "la", "mayoría", "de", "las", "personas", "no", "les", "gusta", "la", "programación")
v.car
v.car2 <- v.car("a":"gusta")
v.car2 <- v.car("a", "gusta")
v.car <- c("a", "la", "mayoría", "de", "las", "personas", "no", "les", "gusta", "la", "programación")
v.car2 <- v.car("a", "gusta")
v.car2 <- v.car("a", "gusta")
v.car2 <- v.car("a", "gusta")
v.car
v.car2 <- v.car(1, 5, 6, 8, 9)
v.car2 <- v.car[1, 5, 6, 8, 9]
v.car2 <- v.car[c(1, 5, 6, 8, 9)]
v.car2
mujeres <- sample(40:50, 10)
mujeres
hombres <- sample(60:100, 10)
hombres
mean(hombres) - mean(mujeres)
# remove all objects
rm(list = ls())
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
# list packages (use user/package.name for github packages)
x <- c("maRce10/warbleR", "ggplot2", "RColorBrewer", #"googlesheets",
"kableExtra", "knitr", "stringdist",  "maRce10/Rraven", "parallel", "vegan", #"irr", "stringr", "moments",
"pbapply"
#"Rtsne", "mclust", "caret", "randomForest", "dkahle/ggmap", "cowplot"
)
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
try(warbleR_options(flim = c(2, 14), bp = c(2, 14), ovlp = 90, wl = 300, parallel = 1, pb = TRUE,  wav.path = "/home/dell/Dropbox/Recordings/vervain_recs/converted_sound_files"), silent = TRUE)
try(warbleR_options(flim = c(2, 14), bp = c(2, 14), ovlp = 90, wl = 300, parallel = 1, pb = TRUE,  wav.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files"), silent = TRUE)
try(warbleR_options(flim = c(2, 14), bp = c(2, 14), ovlp = 90, wl = 300, parallel = 1, pb = TRUE,  wav.path = "/home/dell/Dropbox/Recordings/vervain_recs/converted_sound_files"), silent = TRUE)
sls <- imp_raven(warbler.format = TRUE, all.data = TRUE)
class(sls)
cs <- check_sels(sls)
table(cs$check.res)
sls <- sls[cs$check.res != "OK", ]
cs <- check_sels(sls)
sls <- sls[cs$check.res != "OK", ]
cs <- check_sels(sls)
sls <- imp_raven(warbler.format = TRUE, all.data = TRUE)
cs <- check_sels(sls)
cs$check.res != "OK"
sls <- sls[cs$check.res == "OK", ]
cs <- check_sels(sls)
table(cs$check.res)
unique(cs$sound.files[cs$check.res != "OK"])
full_spec(X = sls[1:100, ], width = 24 / 1.5, height = 15 / 1.5, fast.spec = TRUE, pal = reverse.gray.colors.1, res = 70, sxrow = 5, rows = 15)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/full_spectrograms")
sls <- sls[order(sls$sound.files, sls$start), ]
full_spec(X = sls[1:50, ], width = 24 / 1.5, height = 15 / 1.7, fast.spec = TRUE, pal = reverse.gray.colors.1, res = 70, sxrow = 5, rows = 18)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/full_spectrograms")
full_spec(X = sls[1:50, ], width = 24 / 1.5, height = 20 / 1.5, fast.spec = TRUE, pal = reverse.gray.colors.1, res = 70, sxrow = 5, rows = 18)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/full_spectrograms")
detectCores()
full_spec(X = sls[1:50, ], width = 24 / 1.5, height = 20 / 1.5, fast.spec = TRUE, pal = reverse.gray.colors.1, res = 70, sxrow = 5, rows = 18, parallel = 3, ovlp = 20)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/full_spectrograms")
full_spec(X = sls, width = 24 / 1.5, height = 20 / 1.5, fast.spec = TRUE, pal = reverse.gray.colors.1, res = 70, sxrow = 5, rows = 17, parallel = 3, ovlp = 20)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/full_spectrograms")
sls <- imp_raven(warbler.format = TRUE, all.data = TRUE)
cs <- check_sels(sls)
sls <- sls[cs$check.res == "OK", ]
names(sls)
table(sls$Indiv)
hist(table(sls$Indiv))
mean(table(sls$Indiv))
sd(table(sls$Indiv))
range(table(sls$Indiv))
tb <- table(sls$Indiv)
hist(tb)
range(tb)
tb[tb > 60]
tb[tb > 65]
length(tb)
table(sls$element[sls$Indiv == 8])
tb[tb > 65]
table(sls$element[sls$Indiv == 17])
library(viridis)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "calls", labels = c("selec"), legend = 0, rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs")
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv", labels = c("element"), legend = 0, rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs")
sls <- sls[order(sls$sound.files, sls$Indiv, sls$element), ]
sls <- sls[order(sls$sound.files, sls$Indiv, sls$element), ]
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element"), legend = 0, rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = viridis)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis))
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 3)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 2)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 10)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 10, hatching = 1)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 10, hatching = 1, cex = 2)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element", "sound.files", "start"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 10, hatching = 1, cex = 2)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
unique(sls$sound.files)
gsub("ARAYA-SAL-|\\.WAV", "", sls$sound.files)
sound.files.num <- gsub("ARAYA-SAL-|\\.WAV", "", sls$sound.files)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element", "sound.files.num", "start"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 10, hatching = 1, cex = 1.2)
sls$sound.files.num <- gsub("ARAYA-SAL-|\\.WAV", "", sls$sound.files)
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element", "sound.files.num", "start"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 10, hatching = 1, cex = 1.2)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
sls$round.start <- round(sls$start, 2)
sls$position <- round(sls$start + (sls$end - sls$start) / 2, 2)
sls$position
catalog(X = sls[sls$Indiv == 8, ], nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "indiv",  labels = c("element", "sound.files.num", "position"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 10, hatching = 1, cex = 1.4)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
table(sls$element[sls$Indiv == 17])
table(sls$element[sls$Indiv == 8])
x <- sls$sound.files[1]
x
X <- sls[sls$sound.files == x, ]
na.omit(X$Indiv)
unique(na.omit(X$Indiv))
out <- lapply(unique(sls$sound.files), function(x){
X <- sls[sls$sound.files == x, ]
X$Indiv <- unique(na.omit(X$Indiv))
X$Source <- unique(na.omit(X$Source))
X$Location <- unique(na.omit(X$Location))
X$Country <- unique(na.omit(X$Country))
return(X)
})
out <- lapply(unique(sls$sound.files), function(x){
X <- sls[sls$sound.files == x, ]
X$Indiv <- unique(na.omit(X$Indiv))[1]
X$Source <- unique(na.omit(X$Source))[1]
X$Location <- unique(na.omit(X$Location))[1]
X$Country <- unique(na.omit(X$Country))[1]
return(X)
})
sls <- do.call(rbind, out)
head(sls)
sls <- imp_raven(warbler.format = TRUE, all.data = TRUE)
cs <- check_sels(sls)
sls <- sls[cs$check.res == "OK", ]
out <- lapply(unique(sls$sound.files), function(x){
X <- sls[sls$sound.files == x, ]
X$Indiv <- unique(na.omit(X$Indiv))[1]
X$Source <- unique(na.omit(X$Source))[1]
X$Location <- unique(na.omit(X$Location))[1]
X$Country <- unique(na.omit(X$Country))[1]
return(X)
})
sls <- do.call(rbind, out)
table(sls$sound.files[is.na(sls$Indiv)])
sls$sound.files.num <- gsub("ARAYA-SAL-|\\.WAV", "", sls$sound.files)
sls$sound.files.num <- gsub("ARAYA-SAL-|\\.WAV", "", sls$sound.files)
out <- lapply(unique(sls$sound.files), function(x){
X <- sls[sls$sound.files == x, ]
X$Indiv <- unique(na.omit(X$Indiv))[1]
X$Source <- unique(na.omit(X$Source))[1]
X$Location <- unique(na.omit(X$Location))[1]
X$Country <- unique(na.omit(X$Country))[1]
return(X)
})
sls <- do.call(rbind, out)
table(sls$sound.files[is.na(sls$Indiv)])
unique(sls$Indiv[sls$sound.files.num == "075"])
exp_raven(sls, file.name = "vervain_selections_Melanie_v02.txt", sound.file.path = .Options$warbleR$wav.path)
fix_path(new.begin.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files", sound.file.col = "Begin File")
sls$element[is.na(sls$element)]
is.na(sls$element)
table(sls$element)
sls$element[sls$element == ""]
sls$element[sls$element == ""] <- "99"
sls$sf.element <- paste(sls$sound.files.num, sls$element, sep = "-")
sls$sf.element
exp_raven(sls, file.name = "vervain_selections_Melanie_v02.txt", sound.file.path = .Options$warbleR$wav.path)
fix_path(new.begin.path = "C:/Users/melan/Documents/vervain_recs/converted_sound_files", sound.file.col = "Begin File")
tb[tb > 65]
length(tb)
sel.indivs <- names(tb[tb > 65])
sel.indivs
sel.sound.files <- unique(sls$sound.files[sls$Indiv %in%  sel.indivs])
sel.sound.files
sel.indivs
catalog(X = sls, nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "_by-sound-file",  labels = c("element", "sound.files.num", "position"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 10, hatching = 1, cex = 1.4)
sls$position <- round(sls$start + (sls$end - sls$start) / 2, 2)
catalog(X = sls, nrow = 10, ncol = 10, same.time.scale = TRUE, mar = 0.03, gr = FALSE, img.suffix = "_by-sound-file",  labels = c("element", "sound.files.num", "position"), legend = 0, tags = "element", rm.axes = TRUE, box = FALSE, width = 20, height = 15, fast.spec = TRUE, pal = viridis, tag.pal = list(viridis), breaks = 10, hatching = 1, cex = 1.4)
move_imgs(from = .Options$warbleR$wav.path, to = "./output/catalogs", overwrite = TRUE)
require(graphics)
View(eurodist)
eurodist
loc <- cmdscale(as.data.frame(eurodist))
View(as.data.frame(eurodist))
View(as.matrix(eurodist))
loc <- cmdscale(eurodist)
x <- loc[, 1]
y <- -loc[, 2] # reflect so North is at the top
loc
x <- loc[, 1]
y <- -loc[, 2] # reflect so North is at the top
## note asp = 1, to ensure Euclidean distances are represented correctly
plot(x, y, type = "n", xlab = "", ylab = "", asp = 1, axes = FALSE,
main = "cmdscale(eurodist)")
text(x, y, rownames(loc), cex = 0.6)
